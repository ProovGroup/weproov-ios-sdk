// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WeProovSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
import AudioToolbox.AudioServices
import AudioToolbox
import Contacts
import CoreVideo
import FLAnimatedImage
import Foundation
import ImageIO
import MBProgressHUD
import MapKit
import SnapKit
import Swift
import SwiftRichString
import SwiftyDraw
import Then
import UIKit
import Vision
@_exported import WeProovSDK
import WebKit
import Wprv
import _Concurrency
import _StringProcessing
public protocol WPPlateValidatorDelegate : AnyObject {
  func plateValidated(plate: Swift.String, modal: UIKit.UIViewController)
  func retryScan()
  func handMadePlate(modal: UIKit.UIViewController)
}
public struct WPListItem<T> : Swift.Hashable where T : Swift.Hashable {
  public let position: Swift.Int
  public let title: Swift.String
  public let value: T
  public init(position: Swift.Int, title: Swift.String, value: T)
  public static func == (lhs: WeProovSDK.WPListItem<T>, rhs: WeProovSDK.WPListItem<T>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class WPTagInfoIAViewController : WeProovSDK.WPVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WPListVC<T> : WeProovSDK.WPVC, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource where T : Swift.Hashable {
  @_Concurrency.MainActor(unsafe) convenience public init(singleUsingTheme theme: WeProovSDK.WPTheme, reportColor: UIKit.UIColor, haveSearch: Swift.Bool, title: Swift.String?, list: [WeProovSDK.WPListItem<T>], selectedItem: WeProovSDK.WPListItem<T>? = nil, completion: @escaping (_ item: WeProovSDK.WPListItem<T>?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) convenience public init(multipleUsingTheme theme: WeProovSDK.WPTheme, reportColor: UIKit.UIColor, haveSelectAll: Swift.Bool, haveSearch: Swift.Bool, title: Swift.String?, list: [WeProovSDK.WPListItem<T>], selectedItems: [WeProovSDK.WPListItem<T>] = [], completion: @escaping (_ items: [WeProovSDK.WPListItem<T>]?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in _: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class WPLocationService : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc public static let shared: WeProovSDK.WPLocationService
  @objc final public let locationManager: CoreLocation.CLLocationManager
  @objc public var lastLocation: CoreLocation.CLLocation? {
    get
  }
  @objc override dynamic public init()
  @objc public func startUpdateLocation()
  @objc public func startUpdateLocationIfAuthorized()
  @objc public func getStatusLocationManager() -> CoreLocation.CLAuthorizationStatus
  @objc public func stopUpdateLocation()
  @objc public func resetLocation()
  @objc public func locationManager(_: CoreLocation.CLLocationManager, didChangeAuthorization: CoreLocation.CLAuthorizationStatus)
  @objc public func locationManager(_: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JTMaterialSpinner : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let circleLayer: QuartzCore.CAShapeLayer
  @_Concurrency.MainActor(unsafe) open var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var animationDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func commonInit()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func updateCircleLayer()
  @_Concurrency.MainActor(unsafe) open func forceBeginRefreshing()
  @_Concurrency.MainActor(unsafe) open func beginRefreshing()
  @_Concurrency.MainActor(unsafe) open func endRefreshing()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class WPReportView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct ImageProcessor {
  public static func pixelBuffer(forImage image: CoreGraphics.CGImage) -> CoreVideo.CVPixelBuffer?
}
@objc public enum WPReportCloseState : Swift.Int {
  case canceled, saved, background, submitted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol WPReportManagerDelegate {
  @objc func reportCurrentSectionDidChange(manager: WeProovSDK.WPReportManager, section: Swift.Int)
  @objc func reportDidClose(manager: WeProovSDK.WPReportManager, state: WeProovSDK.WPReportCloseState)
}
@objc public class WPReportManager : ObjectiveC.NSObject {
  @objc weak public var delegate: WeProovSDK.WPReportManagerDelegate?
  @objc public var report: WeProovSDK.WPReport {
    @objc get
  }
  @objc public var currentSectionIndex: Swift.Int {
    @objc get
    @objc set(newValue)
  }
  @objc public var numberOfSections: Swift.Int {
    @objc get
  }
  @objc public var sections: [Swift.String] {
    @objc get
  }
  @objc public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @objc public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc deinit
  @objc public init(controller: UIKit.UIViewController, report: WeProovSDK.WPReport, theme: WeProovSDK.WPTheme? = nil)
  @objc public func load(reportView: WeProovSDK.WPReportView)
  @objc public func closeReport()
  @objc public func saveAndCloseReport() -> Swift.Error?
}
extension WeProovSDK.WPReportManager : UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
}
extension WeProovSDK.WPReportManager : UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers _: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
extension WeProovSDK.WPReportManager : WeProovSDK.WPReportUploaderDelegate, WeProovSDK.WPReportUploadViewControllerDelegate {
  @objc dynamic public func reportUploaderUploadAdded(identifier: Swift.String)
  @objc dynamic public func reportUploaderUploadUpdated(identifier: Swift.String, progress: Swift.Float)
  @objc dynamic public func reportUploaderUploadFinished(identifier: Swift.String, withView: Swift.Bool, error: Swift.Bool)
  @objc dynamic public func setUploadToBackground()
  @objc dynamic public func callRetry()
}
public struct WPReportOptions {
}
@_inheritsConvenienceInitializers @objc public class WPSignatureOptions : ObjectiveC.NSObject {
  public var footerText: Swift.String
  public var options: [WeProovSDK.WPSignatureLinkOption]
  @objc override dynamic public init()
  public init(footerText: Swift.String, options: [WeProovSDK.WPSignatureLinkOption])
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class WPSignatureLinkOption : ObjectiveC.NSObject {
  public var title: Swift.String
  public var action: WeProovSDK.SignatureLinkAction
  public var url: Swift.String
  public var urlTitle: Swift.String?
  @objc override dynamic public init()
  public init(title: Swift.String, action: WeProovSDK.SignatureLinkAction, url: Swift.String, urlTitle: Swift.String? = nil)
  @objc deinit
}
@objc public enum SignatureLinkAction : ObjectiveC.NSInteger {
  case actionPdf = 0
  case actionWebView
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc public protocol WPReportViewControllerDelegate {
  @objc func reportViewControllerDidDismiss(state: WeProovSDK.WPReportCloseState)
}
@objc @_Concurrency.MainActor(unsafe) open class WPReportViewController : WeProovSDK.WPVC {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: WeProovSDK.WPReportViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public init(report: WeProovSDK.WPReport, theme: WeProovSDK.WPTheme? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension WeProovSDK.WPReportViewController : WeProovSDK.WPReportManagerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func reportCurrentSectionDidChange(manager: WeProovSDK.WPReportManager, section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func reportDidClose(manager _: WeProovSDK.WPReportManager, state: WeProovSDK.WPReportCloseState)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class WPTableLoaderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let spinnerView: WeProovSDK.JTMaterialSpinner
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame _: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func beginRefreshing()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class WPPartOption : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class WPParameters : ObjectiveC.NSObject {
  @objc public static var shared: WeProovSDK.WPParameters?
  @objc public var partOptions: [Swift.Int : WeProovSDK.WPPartOption]
  @objc public var isImportSectionVisibleByDefault: Swift.Bool
  @objc public var canSave: Swift.Bool
  @objc public var keepCache: Swift.Bool
  @objc public var canUploadInBackground: Swift.Bool
  @objc public var enableDamageList: Swift.Bool
  @objc public var signatureOptions: WeProovSDK.WPSignatureOptions?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol WPReportSaveViewControllerDelegate {
  @objc func reportCancelSave()
}
@objc public protocol WPReportUploadViewControllerDelegate {
  @objc func callRetry()
  @objc func setUploadToBackground()
}
@objc public protocol WPReportUploaderDelegate {
  @objc func reportUploaderUploadAdded(identifier: Swift.String)
  @objc func reportUploaderUploadUpdated(identifier: Swift.String, progress: Swift.Float)
  @objc func reportUploaderUploadFinished(identifier: Swift.String, withView: Swift.Bool, error: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class WPReportUploader : ObjectiveC.NSObject {
  @objc public static let shared: WeProovSDK.WPReportUploader
  @objc weak public var delegate: WeProovSDK.WPReportUploaderDelegate? {
    @objc get
    @objc set
  }
  @objc public func sync()
  public func syncOne(_ hash: Swift.String)
  @objc public func handleEventsForBackgroundURLSession(identifier: Swift.String, completionHandler: @escaping () -> Swift.Void) -> Swift.Bool
  @objc public func clearUploads()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JTBorderDotAnimation2 {
  open func start()
  open func stop()
  open func createPointView() -> UIKit.UIView
  open func createAnimation() -> QuartzCore.CAKeyframeAnimation
  @objc deinit
}
@_hasMissingDesignatedInitializers open class WpError {
  @objc deinit
}
@objc open class WpErrors : Foundation.NSError {
  public init(code: Swift.Int, type: Swift.String, message: Swift.String)
  required public init(err: Foundation.NSError?)
  @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WPLoaderView {
  public static var lastError: Foundation.NSError?
  public static var lastErrorDate: Foundation.Date?
  public static let backgroundOverlay: UIKit.UIView
  public static let loaderViewContainer: UIKit.UIView
  public static let dotAnimation: WeProovSDK.JTBorderDotAnimation2
  public class func alertForError(_ error: Foundation.NSError, defaultText: Swift.String? = nil)
  public class func alertForError(_ error: WeProovSDK.WpErrors, defaultText: Swift.String? = nil)
  public class func alertForError(_ error: Swift.Error!, defaultText: Swift.String? = nil)
  public class func alert(_ text: Swift.String)
  public class func alertDetailed(_ text: Swift.String)
  public class func show(_ view: UIKit.UIView? = nil)
  public class func hide(_ view: UIKit.UIView? = nil)
  public class func showView(_ view: UIKit.UIView)
  public class func hideView(_ view: UIKit.UIView)
  @objc deinit
}
@objc public protocol WPUserDelegate {
  @objc func userDidConnect(user: WeProovSDK.WPUser)
  @objc func userFailedToConnect(user: WeProovSDK.WPUser, error: Swift.Error?)
  @objc func userNeedMultipleAuthentication(user: WeProovSDK.WPUser, _ processId: Swift.Int, webViewUrl url: Swift.String?)
}
@objc public protocol WPReportDownloaderDelegate {
  @objc func reportLoading(downloader: WeProovSDK.WPReportDownloader)
  @objc func reportLoadingProgress(downloader: WeProovSDK.WPReportDownloader, progress: Swift.Float)
  @objc func reportDidLoad(downloader: WeProovSDK.WPReportDownloader, report: WeProovSDK.WPReport)
  @objc func reportFailedToLoad(downloader: WeProovSDK.WPReportDownloader, error: Swift.Error?)
  @objc func reportCanShowSection(downloader: WeProovSDK.WPReportDownloader, section: Swift.Int) -> Swift.Bool
  @available(*, deprecated, message: "Deprecated. Please do not use it anymore.")
  @objc optional func reportCanShowSectionImport(downloader: WeProovSDK.WPReportDownloader, section: Swift.Int) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc public class WPReportDownloader : ObjectiveC.NSObject {
  @objc weak public var delegate: WeProovSDK.WPReportDownloaderDelegate?
  @objc public func load(proovCode: Swift.String)
  @objc public func load(templateId: Swift.Int, dataToFillTemplate: Swift.String?, item: Wprv.ItemsStruct?)
  @objc public func loadReportInCache()
  @objc public func haveReportInCache() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension WeProovSDK.WPReportDownloader : Wprv.ReportFullDelegateProtocol {
  @objc dynamic public func onReportFullError(_ error: Swift.Error?)
  @objc dynamic public func onReportFullSuccess(_ report: Wprv.ReportStruct?)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class WPReportUploadViewController : WeProovSDK.WPVC {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: WeProovSDK.WPReportUploadViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func updateProgression(value: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) public func showError()
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class WPInformationIAViewController : WeProovSDK.WPVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class WPVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class WPReportSaveViewController : WeProovSDK.WPVC {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: WeProovSDK.WPReportSaveViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class WPReport : ObjectiveC.NSObject {
  @objc public enum ReportState : Swift.Int {
    case pendingFirst, pendingSecond, finished
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  final public let wpReport: Wprv.ReportStruct
  @objc public var haveDropoff: Swift.Bool {
    @objc get
  }
  @objc public var pendingFirstFinishedAt: Foundation.Date? {
    @objc get
  }
  @objc public var pendingSecondFinishedAt: Foundation.Date? {
    @objc get
  }
  public var canBeSaved: Swift.Bool {
    get
  }
  @objc public func state() -> WeProovSDK.WPReport.ReportState
  public func importItem(item: Wprv.ItemsStruct, pictures: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class WPUser : ObjectiveC.NSObject, Wprv.UserDelegateProtocol {
  @objc weak public var delegate: WeProovSDK.WPUserDelegate?
  @objc public static var shared: WeProovSDK.WPUser
  @objc public var connected: Swift.Bool {
    @objc get
  }
  @objc public var lang: Swift.String {
    @objc get
    @objc set(newVal)
  }
  @objc public func setAppAuthCredentials(clientID: Swift.String, secret: Swift.String)
  @objc public func connect()
  @objc public func logout()
  @objc public func onUserLock(_ err: Swift.Error?)
  @objc public func onUserError(_ e: Swift.Error?)
  @objc public func onUserSuccess(_: Wprv.UserStruct?)
  @objc public func onUserNeedMultipleAuthentication(_ processID: Swift.Int, webviewURL: Swift.String?)
  @objc deinit
}
@objc public protocol WPReportDownloadViewControllerDelegate {
  @objc func reportCancelDownload()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class WPTheme : ObjectiveC.NSObject {
  @objc public var reportInitialColor: UIKit.UIColor
  @objc public var reportFinalColor: UIKit.UIColor
  @objc public var reportArchivedColor: UIKit.UIColor
  @objc public var headerBackgroundColor: UIKit.UIColor
  @objc public var headerBorderColor: UIKit.UIColor
  @objc public var headerItemIndexColor: UIKit.UIColor
  @objc public var headerItemIndexBackgroundColor: UIKit.UIColor
  @objc public var headerItemIndexFont: UIKit.UIFont
  @objc public var headerItemErrorColor: UIKit.UIColor
  @objc public var headerItemErrorBackgroundColor: UIKit.UIColor
  @objc public var headerItemErrorFont: UIKit.UIFont
  @objc public var sectionHeaderDateTextColor: UIKit.UIColor
  @objc public var sectionHeaderDateFont: UIKit.UIFont
  @objc public var sectionHeaderInfoTextColor: UIKit.UIColor
  @objc public var sectionHeaderInfoFont: UIKit.UIFont
  @objc public var sectionHeaderImportTextColor: UIKit.UIColor
  @objc public var sectionHeaderImportFont: UIKit.UIFont
  @objc public var sectionBackgroundColor: UIKit.UIColor
  @objc public var fieldSetBackgroundColor: UIKit.UIColor
  @objc public var fieldSetTitleColor: UIKit.UIColor
  @objc public var fieldSetTitleFont: UIKit.UIFont
  @objc public var fieldSetSubtitleColor: UIKit.UIColor
  @objc public var fieldSetSubtitleFont: UIKit.UIFont
  @objc public var fieldSetLegendColor: UIKit.UIColor
  @objc public var fieldSetLegendFont: UIKit.UIFont
  @objc public var fieldSetBorderColor: UIKit.UIColor
  @objc public var fieldInitialValueFont: UIKit.UIFont
  @objc public var fieldInitialValueColor: UIKit.UIColor
  @objc public var fieldInitialValueDifferenceColor: UIKit.UIColor
  @objc public var fieldLabelFont: UIKit.UIFont
  @objc public var fieldLabelDefaultColor: UIKit.UIColor
  @objc public var fieldLabelErrorColor: UIKit.UIColor
  @objc public var fieldBorderDefaultColor: UIKit.UIColor
  @objc public var fieldBorderErrorColor: UIKit.UIColor
  @objc public var fieldPlaceholderAndValueFont: UIKit.UIFont
  @objc public var fieldPlaceholderColor: UIKit.UIColor
  @objc public var fieldValueDefaultColor: UIKit.UIColor
  @objc public var fieldValueErrorColor: UIKit.UIColor
  @objc public var fieldValueEmptyColor: UIKit.UIColor
  @objc public var fieldNumericValueFont: UIKit.UIFont
  @objc public var fieldNumericValueColor: UIKit.UIColor
  @objc public var fieldSwitchValueFont: UIKit.UIFont
  @objc public var fieldSwitchValueColor: UIKit.UIColor
  @objc public var fieldSwitchOffColor: UIKit.UIColor
  @objc public var fieldSwitchOnColor: UIKit.UIColor
  @objc public var fieldPhotoContainerBackgroundColor: UIKit.UIColor
  @objc public var fieldPhotoContainerBorderColor: UIKit.UIColor
  @objc public var fieldPhotoContainerBorderValidColor: UIKit.UIColor
  @objc public var fieldPhotoContainerBorderErrorColor: UIKit.UIColor
  @objc public var fieldPhotoBackgroundColor: UIKit.UIColor
  @objc public var fieldPhotoPlaceholderColor: UIKit.UIColor
  @objc public var fieldPhotoValidColor: UIKit.UIColor
  @objc public var fieldPhotoTextColor: UIKit.UIColor
  @objc public var fieldPhotoTextFont: UIKit.UIFont
  @objc public var fieldPhotoStartTextColor: UIKit.UIColor
  @objc public var fieldPhotoStartTextFont: UIKit.UIFont
  @objc public var fieldPhotoAddTextFont: UIKit.UIFont
  @objc public var fieldPhotoAnnotationFont: UIKit.UIFont
  @objc public var fieldPhotoAnnotationTextColor: UIKit.UIColor
  @objc public var fieldPhotoAnnotationBackgroundColor: UIKit.UIColor
  @objc public var navigationBarBackgroundColor: UIKit.UIColor
  @objc public var navigationBarTitleFont: UIKit.UIFont
  @objc public var navigationBarTitleColor: UIKit.UIColor
  @objc public var navigationBarItemsFont: UIKit.UIFont
  @objc public var summaryLabelFont: UIKit.UIFont
  @objc public var listBackgroundColor: UIKit.UIColor
  @objc public var listTitleFont: UIKit.UIFont
  @objc public var listTitleColor: UIKit.UIColor
  @objc public var listCloseFont: UIKit.UIFont
  @objc public var listCloseColor: UIKit.UIColor
  @objc public var listSeparatorColor: UIKit.UIColor
  @objc public var listCellFont: UIKit.UIFont
  @objc public var listCellColor: UIKit.UIColor
  @objc public var listCellSelectedBackgroundColor: UIKit.UIColor
  @objc public var listSearchFont: UIKit.UIFont
  @objc public var listSearchColor: UIKit.UIColor
  @objc public var listSearchBackgroundColor: UIKit.UIColor
  @objc public var signatureBackgroundColor: UIKit.UIColor
  @objc public var signatureNavigationBarItemsColor: UIKit.UIColor
  @objc public var signatureHeaderSectionFont: UIKit.UIFont
  @objc public var signatureHeaderSectionColor: UIKit.UIColor
  @objc public var signatureHeaderInfoFont: UIKit.UIFont
  @objc public var signatureHeaderInfoColor: UIKit.UIColor
  @objc public var signatureSubmitButtonBackgroundColor: UIKit.UIColor
  @objc public var signatureSubmitButtonColor: UIKit.UIColor
  @objc public var signatureSubmitButtonFont: UIKit.UIFont
  @objc public var signatureClearButtonColor: UIKit.UIColor
  @objc public var signatureClearButtonFont: UIKit.UIFont
  @objc public var signatureSeeReportButtonColor: UIKit.UIColor
  @objc public var signatureSeeReportButtonFont: UIKit.UIFont
  @objc public var signatureFooterFont: UIKit.UIFont
  @objc public var signatureFooterBackgroundColor: UIKit.UIColor
  @objc public var signatureFooterColor: UIKit.UIColor
  @objc public var signatureFooterHighlightColor: UIKit.UIColor
  @objc public var cameraBackgroundColor: UIKit.UIColor
  @objc public var cameraHeaderTintColor: UIKit.UIColor
  @objc public var cameraFooterButtonFont: UIKit.UIFont
  @objc public var cameraFooterButtonColor: UIKit.UIColor
  @objc public var cameraFooterImageStateFont: UIKit.UIFont
  @objc public var cameraFooterButtonCloseColor: UIKit.UIColor
  @objc public var cameraFooterButtonCloseFont: UIKit.UIFont
  @objc public var cameraFooterButtonCloseBackgroundColor: UIKit.UIColor
  @objc public var cameraContentLabelFont: UIKit.UIFont
  @objc public var cameraContentLabelColor: UIKit.UIColor
  @objc public var cameraContentLabelSeparatorColor: UIKit.UIColor
  @objc public var cameraContentLabelBackgroundColor: UIKit.UIColor
  @objc public var cameraContentLabelValidBackgroundColor: UIKit.UIColor
  @objc public var cameraContentLabelErrorBackgroundColor: UIKit.UIColor
  @objc public var cameraContentLabelStateFont: UIKit.UIFont
  @objc public var cameraContentLabelStateColor: UIKit.UIColor
  @objc public var cameraContentModalBackgroundColor: UIKit.UIColor
  @objc public var cameraContentModalFont: UIKit.UIFont
  @objc public var cameraContentModalTextColor: UIKit.UIColor
  @objc public var cameraContentModalTextSecondaryColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorBackgroundColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorHeaderButtonTextColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorHeaderTextColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorHeaderTextFont: UIKit.UIFont
  @objc public var cameraAnnotationEditorHeaderMatrixTextFont: UIKit.UIFont
  @objc public var cameraAnnotationEditorHeaderAnnotationBackgroundColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorHeaderAnnotationColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorHeaderAnnotationFont: UIKit.UIFont
  @objc public var cameraAnnotationEditorContentBackgroundColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorContentBorderColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorContentFont: UIKit.UIFont
  @objc public var cameraAnnotationEditorContentColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorContentPlaceholderColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorFooterDeleteColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorFooterButtonColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorFooterButtonFont: UIKit.UIFont
  @objc public var cameraAnnotationEditorFooterButtonSaveBackgroundColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorFooterButtonSaveColor: UIKit.UIColor
  @objc public var cameraAnnotationEditorFooterButtonSaveFont: UIKit.UIFont
  @objc public var cameraAskIfThereDamageBackgroundColor: UIKit.UIColor
  @objc public var cameraAskIfThereDamageTextColor: UIKit.UIColor
  @objc public var cameraDamageEditorContentFont: UIKit.UIFont
  @objc public var cameraPopupBackgroundColor: UIKit.UIColor
  @objc public var cameraPopupTitleColor: UIKit.UIColor
  @objc public var cameraPopupTitleFont: UIKit.UIFont
  @objc public var cameraPopupContentColor: UIKit.UIColor
  @objc public var cameraPopupContentFont: UIKit.UIFont
  @objc public var cameraAnnotationsMenuItemIndexColor: UIKit.UIColor
  @objc public var cameraAnnotationsMenuItemIndexBackgroundColor: UIKit.UIColor
  @objc public var cameraAnnotationsMenuItemIndexFont: UIKit.UIFont
  @objc public var cameraAnnotationsMenuItemTitleFont: UIKit.UIFont
  @objc public var cameraAnnotationsMenuItemTitleColor: UIKit.UIColor
  @objc public var cameraAnnotationsMenuItemContentFont: UIKit.UIFont
  @objc public var cameraAnnotationsMenuItemContentColor: UIKit.UIColor
  @objc public var signatureOptions: WeProovSDK.WPSignatureOptions?
  @objc public var termsOfService: Swift.String?
  @objc public var termsOfServiceURL: Foundation.URL
  @objc public var privacyURL: Foundation.URL
  @objc public var navigationVCType: UIKit.UINavigationController.Type?
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let currentSectionDidChange: Foundation.Notification.Name
  public static let sectionErrorsDidChange: Foundation.Notification.Name
  public static let localeDidChange: Foundation.Notification.Name
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class WPReportDownloadViewController : WeProovSDK.WPVC {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: WeProovSDK.WPReportDownloadViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func updateProgression(value: Swift.Float)
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WPMatrixVC<T> : WeProovSDK.WPVC, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource where T : Swift.Hashable {
  @_Concurrency.MainActor(unsafe) convenience public init(singleUsingTheme theme: WeProovSDK.WPTheme, reportColor: UIKit.UIColor, haveSearch: Swift.Bool, wpProcessField: Wprv.ReportProcess, selectedItem: Swift.String? = nil, indexAnnotationToEdit: Swift.Int = -1, completion: @escaping (_ item: Swift.String?, _ price: Swift.Int?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in _: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
extension CoreVideo.CVBuffer {
  public func centerThumbnail(ofSize size: CoreFoundation.CGSize) -> CoreVideo.CVPixelBuffer?
  public static func buffer(from image: UIKit.UIImage) -> CoreVideo.CVPixelBuffer?
}
extension UIKit.UIImage {
  public func rotated(by degrees: CoreFoundation.CGFloat) -> UIKit.UIImage
}
@objc public protocol WPReportSaverDelegate {
  @objc func reportSaverUploadAdded(identifier: Swift.String)
  @objc func reportSaverUploadUpdated(identifier: Swift.String, progress: Swift.Float)
  @objc func reportSaverUploadFinished(identifier: Swift.String, withView: Swift.Bool, error: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class WPReportSaver : ObjectiveC.NSObject {
  @objc public static let shared: WeProovSDK.WPReportSaver
  @objc weak public var delegate: WeProovSDK.WPReportSaverDelegate? {
    @objc get
    @objc set
  }
  @objc public func sync()
  public func syncOne(_ hash: Swift.String)
  @objc public func handleEventsForBackgroundURLSession(identifier: Swift.String, completionHandler: @escaping () -> Swift.Void) -> Swift.Bool
  @objc public func clearUploads()
  @objc deinit
}
@objc public protocol WPCameraDelegate {
  @objc func cameraAddCameraLayer(_ cameraLayer: AVFoundation.AVCaptureVideoPreviewLayer)
  @objc optional func cameraDidCaptureImage(_ imageData: Foundation.Data)
  @objc optional func cameraFailedCaptureImage(_ error: Swift.Error)
  @objc optional func cameraDidRecognizeQrCode(_ metadata: Swift.String)
  @objc optional func cameraDidRecognizeVIN(_ metadata: Swift.String)
  @objc optional func cameraDidRecognizePlate(_ metadata: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class WPCamera : ObjectiveC.NSObject {
  weak open var delegate: WeProovSDK.WPCameraDelegate?
  open var device: AVFoundation.AVCaptureDevice? {
    get
  }
  open var captureSession: AVFoundation.AVCaptureSession {
    get
  }
  @objc override dynamic public init()
  @discardableResult
  open func start(qrCode: Swift.Bool = false, vin: Swift.Bool = false, plate: Swift.Bool = false, imageView: UIKit.UIImageView? = nil) -> Swift.Bool
  open func stop()
  open func captureImage() -> Swift.Bool
  open var flashMode: AVFoundation.AVCaptureDevice.FlashMode? {
    get
    set
  }
  open func supportedFlashModes() -> [AVFoundation.AVCaptureDevice.FlashMode]
  open func activeTorch(_ active: Swift.Bool)
  open func resetExposureTargetBias()
  open func setExposureTargetBias(_ bias: Swift.Float)
  open func focus(point: CoreFoundation.CGPoint)
  @objc deinit
}
extension WeProovSDK.WPCamera : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @objc dynamic public func metadataOutput(_: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from _: AVFoundation.AVCaptureConnection)
}
extension WeProovSDK.WPCamera : AVFoundation.AVCapturePhotoCaptureDelegate {
  @available(iOS 11.0, *)
  @objc dynamic public func photoOutput(_: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
  @objc dynamic public func photoOutput(_: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photoSampleBuffer: CoreMedia.CMSampleBuffer?, previewPhoto previewSampleBuffer: CoreMedia.CMSampleBuffer?, resolvedSettings _: AVFoundation.AVCaptureResolvedPhotoSettings, bracketSettings _: AVFoundation.AVCaptureBracketedStillImageSettings?, error: Swift.Error?)
}
extension WeProovSDK.WPCamera : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from _: AVFoundation.AVCaptureConnection)
}
extension WeProovSDK.WPReportCloseState : Swift.Equatable {}
extension WeProovSDK.WPReportCloseState : Swift.Hashable {}
extension WeProovSDK.WPReportCloseState : Swift.RawRepresentable {}
extension WeProovSDK.SignatureLinkAction : Swift.Equatable {}
extension WeProovSDK.SignatureLinkAction : Swift.Hashable {}
extension WeProovSDK.SignatureLinkAction : Swift.RawRepresentable {}
extension WeProovSDK.WPReport.ReportState : Swift.Equatable {}
extension WeProovSDK.WPReport.ReportState : Swift.Hashable {}
extension WeProovSDK.WPReport.ReportState : Swift.RawRepresentable {}
